package com.krux.hyperion

import scala.annotation.tailrec
import scala.util.{Failure, Success}
import scala.io.StdIn
import org.parboiled2._

object ExpressionParser {

  // our abstract syntax tree model
  sealed trait Expr
  case class Value(value: String) extends Expr
  case class Addition(lhs: Expr, rhs: Expr) extends Expr
  case class Subtraction(lhs: Expr, rhs: Expr) extends Expr
  case class Multiplication(lhs: Expr, rhs: Expr) extends Expr
  case class Division(lhs: Expr, rhs: Expr) extends Expr

  /**
   * This parser reads simple calculator expressions and builds an AST
   * for them, to be evaluated in a separate phase, after parsing is completed.
   */
  case class Parser1(input: ParserInput) extends Parser {

    def InputLine = rule { Expression ~ EOI }

    def Expression: Rule1[Expr] = rule {
      Term ~ zeroOrMore(
        '+' ~ Term ~> Addition
          | '-' ~ Term ~> Subtraction)
    }

    def Term = rule {
      Factor ~ zeroOrMore(
        '*' ~ Factor ~> Multiplication
          | '/' ~ Factor ~> Division)
    }

    def Factor = rule { Number | Parens }

    def Parens = rule { '(' ~ Expression ~ ')' }

    def Number = rule { capture(Digits) ~> Value }

    def Digits = rule { oneOrMore(CharPredicate.Digit) }
  }

  @tailrec
  def repl(): Unit =
    StdIn.readLine("---\nEnter calculator expression > ") match {
      case "" =>
      case line =>
        Parser1(line).InputLine.run() match {
          case Success(exprAst)       => println("Result: " + eval(exprAst))
          case Failure(e: ParseError) => println("Expression is not valid: " + e.format(line))
          case Failure(e)             => println("Unexpected error during parsing run: " + e)
        }
        repl()
    }

  def eval(expr: Expr): Int =
    expr match {
      case Value(v)             => v.toInt
      case Addition(a, b)       => eval(a) + eval(b)
      case Subtraction(a, b)    => eval(a) - eval(b)
      case Multiplication(a, b) => eval(a) * eval(b)
      case Division(a, b)       => eval(a) / eval(b)
    }

  def main(args: Array[String]): Unit = {
    repl()
  }
}
